{"id":"e81e1433-0a4a-444c-ad31-624889a484fc","zed":"context","version":"0.4.0","text":"\n\n\n```jsx edgeboost-frontend/src/pages/apps/funds/components/AfterHoursNoticeModal.jsx\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n// as of EDGE-1797 we're changing the logic to allow deposits after 6 PM EST\n// @TODO this hour should become an environment variable or configuration setting later on\nconst initAfterHoursModal = (setShowAfterHoursModal, setNotAllowed) => {\n    const now = new Date();\n\n    // Create a date object in the EST/EDT timezone\n    const options = { timeZone: 'America/New_York', hour: 'numeric', minute: 'numeric', hour12: false };\n    const timeString = now.toLocaleString('en-US', options);\n    // Parse the hours and minutes\n    const [hours, minutes] = timeString.split(':').map(Number);\n    console.log('Current time in EST/EDT:', timeString, 'Hours:', hours);\n    setShowAfterHoursModal(hours >= 18); // Check if it's 6 PM or later\n    setNotAllowed(hours >= 18); // Set notAllowed to true only if it's 6 PM or later\n};\n\nconst AfterHoursNoticeModal = ({ isOpen, onClose, isDeposit }) => {\n    const achType = isDeposit ? 'ACH Deposit' : 'ACH Withdrawal';\n    return (\n        <Modal isOpen={isOpen} toggle={onClose} backdrop=\"static\">\n            <ModalHeader toggle={onClose}>After Hours {isDeposit ? 'Deposit' : 'Withdrawal'} Notice</ModalHeader>\n            <ModalBody>{achType} is not allowed after 6 PM EST. Please try again tomorrow.</ModalBody>\n            <ModalFooter>\n                <Button className=\"btn-default\" onClick={onClose}>\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport { initAfterHoursModal, AfterHoursNoticeModal };\n```\n\n```js edgeboost-frontend/src/pages/apps/funds/BankDeposit.js\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, CardTitle, FormGroup, Label, Input, CardHeader, Alert } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { changeLayoutTitle, updateUserData } from '#redux/actions.js';\nimport { NumericFormat } from 'react-number-format';\nimport EdgeToast from '#components/EdgeToast.js';\nimport useUnsupportedBankModal from '#hooks/useUnsupportedBankModal.js';\nimport UnsupportedBankModal from '#components/UnsupportedBankModal';\nimport DirectDepositInstructions from './components/DirectDepositInstructions';\nimport WeekendNoticeModal from './components/WeekendNoticeModal';\nimport BaseAPI from '#helpers/base-api.js';\nimport { Helmet } from 'react-helmet';\nimport federalHolidays from './components/federalHolidays.json';\nimport FederalHolidayNoticeModal from './components/FederalHolidayNoticeModal';\n\nimport { initAfterHoursModal, AfterHoursNoticeModal } from './components/AfterHoursNoticeModal';\nconst baseAPI = new BaseAPI();\n\nconst BankDepositPage = () => {\n    const navigate = useNavigate();\n    const [isDepositLoading, setIsDepositLoading] = useState(false);\n    const [requiredBalancePercentage, setRequiredBalancePercentage] = useState(20); // we need to get this from the API to make it dynamic and prevent shenanigans with dev tools\n\n    const [showToast, setShowToast] = useState(false);\n    const [toastType, setToastType] = useState('success');\n    const [toastTitle, setToastTitle] = useState('');\n    const [toastContent, setToastContent] = useState('');\n    const [isBalanceSufficientForDeposit, setIsBalanceSufficientForDeposit] = useState(false);\n    const toggleToast = () => setShowToast(!showToast);\n    const showMessageToast = (type, title, content) => {\n        setToastType(type);\n        setToastTitle(title);\n        setToastContent(content);\n        setShowToast(true);\n        setTimeout(() => {\n            setShowToast(false);\n        }, 10000);\n    };\n    const authUser = useSelector((state) => state.Auth.user);\n\n    const [depositAmount, setDepositAmount] = useState(0);\n    const [selectedBankAccount, setSelectedBankAccount] = useState('');\n    const [plaidAccounts, setPlaidAccounts] = useState([]);\n    const [bankAccountBalance, setBankAccountBalance] = useState(0);\n    const [userData, setUserData] = useState({});\n    const [isNoBankAccount, setIsNoBankAccount] = useState(false);\n    const [boostLevel, setBoostLevel] = useState({});\n    const [showAfterHoursModal, setShowAfterHoursModal] = useState(false);\n    const [notAllowed, setNotAllowed] = useState(false);\n    const [showWeekendModal, setShowWeekendModal] = useState('');\n    const [showFederalHolidayModal, setShowFederalHolidayModal] = useState(false);\n    const [holiday, setHoliday] = useState(null);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(changeLayoutTitle('Deposit Funds'));\n        loadData();\n        loadBoostLevelData();\n        getUserData();\n        initWeekendModal();\n        initFederalHolidayModal();\n        initAfterHoursModal(setShowAfterHoursModal, setNotAllowed);\n    }, [dispatch]);\n\n    /**\n     * This sets the default bank account and the balance\n     */\n    useEffect(() => {\n        // Find the default account\n        const defaultAccount = plaidAccounts.find((account) => account.isDefault);\n        if (defaultAccount) {\n            setSelectedBankAccount(defaultAccount.id);\n            updateBankAccountBalance(defaultAccount.id);\n        }\n    }, [plaidAccounts]);\n\n    /**\n     * When the deposit amount is changed, we check and see if that amount is less than the bank balance\n     */\n    useEffect(() => {\n        const requiredMultiplier = 1 + requiredBalancePercentage / 100; // e.g., 1.2 for 20%\n        const isBalanceSufficient = bankAccountBalance >= depositAmount * requiredMultiplier;\n        const isOverPerLimit = depositAmount * 100 > (boostLevel.perDepositLimit || 0) ? true : false;\n        setIsBalanceSufficientForDeposit(isBalanceSufficient && !isOverPerLimit);\n    }, [depositAmount, bankAccountBalance, requiredBalancePercentage]);\n\n    const updateBankAccountBalance = (accountId) => {\n        const selectedAccount = plaidAccounts.find((account) => account.id === accountId);\n        if (selectedAccount) {\n            setBankAccountBalance(selectedAccount.available_balance);\n        } else {\n            setBankAccountBalance(0); // Reset balance if no account is found\n        }\n    };\n\n    /**\n     * Initializes the weekend modal dialog based on the current day of the week.\n     * Shows a modal if the current day is Friday, Saturday, or Sunday.\n     *\n     * Day numbers:\n     * - 0: Sunday\n     * - 1: Monday\n     * - 2: Tuesday\n     * - 3: Wednesday\n     * - 4: Thursday\n     * - 5: Friday\n     * - 6: Saturday\n     *\n     * @function initWeekendModal\n     * @returns {void}\n     * @example\n     * // Check if weekend modal should show\n     * initWeekendModal();\n     */\n    const initWeekendModal = () => {\n        const now = new Date();\n        const currentDay = now.getDay();\n        if ([0, 5, 6].includes(currentDay)) {\n            setShowWeekendModal(true);\n            // if after 5pm on Friday, disable\n            if (currentDay === 5) {\n                // Calculate the EST offset (UTC - 5 hours)\n                const utcOffset = now.getUTCHours() + now.getUTCMinutes() / 60;\n                const estHour = utcOffset - 5; // EST is UTC - 5\n                // Adjust for the day boundary\n                const normalizedHour = estHour < 0 ? estHour + 24 : estHour;\n                setNotAllowed(normalizedHour >= 18);\n            }\n            if ([0, 6].includes(currentDay)) {\n                // if Sat/Sun disable all day\n                setNotAllowed(true);\n            }\n        }\n    };\n    /**\n     * Initializes the federal holiday modal dialog based on the current day.\n     * Shows a modal if the current day is within 24 hours of a Federal Holiday\n     *\n     *\n     * @function initFederalHolidayModal\n     * @returns {void}\n     * @example\n     * // Check if federal holiday modal should show\n     * initFederalHolidayModal();\n     */\n    const initFederalHolidayModal = () => {\n        const now = new Date();\n        const dayInMillis = 24 * 60 * 60 * 1000;\n        let upcomingHoliday = federalHolidays.filter((holiday) => {\n            const holidayDate = new Date(holiday.date);\n            const timeDifference = Math.abs(now - holidayDate);\n            return timeDifference <= dayInMillis;\n        });\n        if (upcomingHoliday.length !== 0) {\n            setHoliday(upcomingHoliday[0]);\n            setShowFederalHolidayModal(true);\n            // if it is the day of, make sure to disable deposits\n            if (\n                new Date(upcomingHoliday[0].date).getUTCFullYear() === now.getUTCFullYear() &&\n                new Date(upcomingHoliday[0].date).getUTCMonth() === now.getUTCMonth() &&\n                new Date(upcomingHoliday[0].date).getUTCDate() === now.getUTCDate()\n            ) {\n                setNotAllowed(true);\n            }\n        }\n    };\n\n    const loadData = async () => {\n        try {\n            const { data: plaidAccounts } = await baseAPI.get('plaid/accounts_with_balances');\n            const defaultAccount = plaidAccounts.find((elem) => elem.isDefault);\n            setPlaidAccounts(plaidAccounts);\n            if (defaultAccount) {\n                setSelectedBankAccount(defaultAccount.id);\n                // updateBankAccountBalance(defaultAccount.id);\n            }\n            setIsNoBankAccount(!(plaidAccounts || []).length);\n        } catch (e) {\n            showMessageToast('danger', 'Bank Account', 'Could not load your accounts, please contact support');\n        }\n    };\n\n    const loadBoostLevelData = async () => {\n        try {\n            const { data: boostLevels } = await baseAPI.get('boostLevels');\n            setBoostLevel(boostLevels.find((item) => item.name == authUser.boostLevel));\n        } catch (e) {}\n    };\n\n    const getUserData = async () => {\n        try {\n            const { data: userProfileData } = await baseAPI.get('profile/me');\n            localStorage.setItem('user', JSON.stringify(userProfileData));\n            dispatch(updateUserData(userProfileData));\n            setUserData(userProfileData);\n        } catch (e) {}\n    };\n\n    const handleDepositClick = async () => {\n        setIsDepositLoading(true);\n        try {\n            const deposit = await baseAPI.post('banking/deposit', {\n                amount: depositAmount,\n                account_id: selectedBankAccount,\n            });\n            console.log('deposit', deposit);\n            navigate('/deposit/confirmation?method=ach&transaction_id=' + deposit.data.id);\n        } catch (e) {\n            showMessageToast('danger', 'Could Not Deposit Funds', e.message);\n        }\n        setIsDepositLoading(false);\n    };\n\n    const handleBankaccountChange = async (e) => {\n        console.log('handling bank account change');\n        setSelectedBankAccount(e.target.value);\n        updateBankAccountBalance(e.target.value);\n    };\n\n    // Calculate the required bank balance\n    const requiredBankBalance = depositAmount * (1 + requiredBalancePercentage / 100);\n\n    const { showUnsupportedBankModal, modalMessage, modalTitle, setShowUnsupportedBankModal } =\n        useUnsupportedBankModal(bankAccountBalance);\n\n    return (\n        <>\n            <Helmet>\n                <title> Deposit Funds into your Account </title>\n            </Helmet>\n            <section className=\"section\">\n                <Row>\n                    <Col lg={10} md={12}>\n                        <Card className=\"shadow border-0\">\n                            <CardHeader>\n                                <CardTitle tag=\"h4\" className=\"mb-0\">\n                                    Deposit Funds Via Your Bank Account\n                                </CardTitle>\n                            </CardHeader>\n                            <CardBody>\n                                <Alert color=\"danger\" isOpen={!!userData.isPendingDeposit}>\n                                    <div>\n                                        You must wait until the deposit has cleared before you can make another deposit.\n                                    </div>\n                                </Alert>\n                                <Alert color=\"warning\" isOpen={isNoBankAccount}>\n                                    <div>\n                                        You do not have a linked bank account now. Please link your bank account{' '}\n                                        <Link to=\"/bank/accounts\">here</Link>.\n                                    </div>\n                                </Alert>\n                                <div className=\"mb-2 mt-2 text-left\">\n                                    <FormGroup row>\n                                        <Label for=\"paymentMethodSelector\" sm={4}>\n                                            Bank Account\n                                        </Label>\n                                        <Col sm={8}>\n                                            <Input\n                                                className=\"form-control\"\n                                                type=\"select\"\n                                                id=\"paymentMethodSelector\"\n                                                value={selectedBankAccount}\n                                                style={{ textTransform: 'capitalize' }}\n                                                onChange={handleBankaccountChange}>\n                                                <option value=\"\">Select bank account</option>\n                                                {plaidAccounts.map((item, index) => (\n                                                    <option\n                                                        key={index}\n                                                        value={item.id}\n                                                        className={`${item.isDefault ? 'default-option' : ''}`}>\n                                                        {item.mask} - {item.name}\n                                                    </option>\n                                                ))}\n                                            </Input>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label sm={4}>\n                                            Amount <br />\n                                            <span style={{ fontSize: '12px', fontWeight: 500 }}>\n                                                Deposits typically clear the same business day, but may take up to 3\n                                                days depending on the financial institution\n                                            </span>\n                                        </Label>\n                                        <Col sm={8}>\n                                            <NumericFormat\n                                                thousandSeparator\n                                                decimalScale={2}\n                                                fixedDecimalScale={true}\n                                                className=\"form-control\"\n                                                value={depositAmount}\n                                                onValueChange={(values) => {\n                                                    setDepositAmount(values.value);\n                                                }}\n                                                isAllowed={({ floatValue }) => !floatValue || floatValue >= 0}\n                                            />\n                                            {authUser.boostLevel === 'level-1' && (\n                                                <h5 style={{ color: 'red' }}>\n                                                    <em>\n                                                        <strong>\n                                                            * Deposits are delayed 24 hrs for new users. Tier 2+\n                                                            deposits clear within 1-2 hours.\n                                                        </strong>\n                                                    </em>\n                                                </h5>\n                                            )}\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label sm={4}>\n                                            Available Bank Balance:\n                                            <br />\n                                            <span style={{ fontSize: '12px', fontWeight: 500 }}>\n                                                Your bank balance must be {requiredBalancePercentage}% higher than the\n                                                deposit amount. <br /> <br />\n                                            </span>\n                                            <span style={{ fontSize: '12px', fontWeight: 500, color: 'red' }}>\n                                                Manipulation of bank balances will result in permanent suspension of\n                                                your account and may trigger a Federal Suspicious Action Report\n                                            </span>\n                                        </Label>\n                                        <Col sm={8}>\n                                            <NumericFormat\n                                                value={bankAccountBalance}\n                                                displayType=\"text\"\n                                                thousandSeparator\n                                                prefix=\"$\"\n                                                decimalScale={2}\n                                                fixedDecimalScale={true}\n                                                className=\"form-control-plaintext\" // Add a class if needed for styling\n                                                readOnly // This makes the input read-only\n                                            />{' '}\n                                            Your balance must be at least: $\n                                            {Number(requiredBankBalance).toLocaleString(undefined, {\n                                                minimumFractionDigits: 2,\n                                                maximumFractionDigits: 2,\n                                            })}\n                                            <br />\n                                            {Number(depositAmount || 0) * 100 >\n                                            Number(boostLevel.perDepositLimit || 0) ? (\n                                                <span style={{ fontSize: '12px', fontWeight: 500, color: 'red' }}>\n                                                    Per deposit limit is $\n                                                    {Number((boostLevel.perDepositLimit || 0) / 100).toLocaleString(\n                                                        undefined,\n                                                        {\n                                                            minimumFractionDigits: 2,\n                                                            maximumFractionDigits: 2,\n                                                        }\n                                                    )}\n                                                    . You can send multiple deposits per day up to your daily limit\n                                                </span>\n                                            ) : (\n                                                <></>\n                                            )}\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label sm={4}>Daily Deposit Limit:</Label>\n                                        <Col sm={8}>\n                                            <NumericFormat\n                                                value={boostLevel.depositLimit / 100}\n                                                displayType=\"text\"\n                                                thousandSeparator\n                                                prefix=\"$\"\n                                                decimalScale={2}\n                                                fixedDecimalScale={true}\n                                                className=\"form-control-plaintext\" // Add a class if needed for styling\n                                                readOnly // This makes the input read-only\n                                            />{' '}\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label sm={4}>Per Deposit Limit:</Label>\n                                        <Col sm={8}>\n                                            <NumericFormat\n                                                value={boostLevel.perDepositLimit / 100}\n                                                displayType=\"text\"\n                                                thousandSeparator\n                                                prefix=\"$\"\n                                                decimalScale={2}\n                                                fixedDecimalScale={true}\n                                                className=\"form-control-plaintext\" // Add a class if needed for styling\n                                                readOnly // This makes the input read-only\n                                            />{' '}\n                                        </Col>\n                                    </FormGroup>\n                                </div>\n                                <div className=\"text-right w-100\">\n                                    <button\n                                        className=\"new-boost-deposit\"\n                                        onClick={handleDepositClick}\n                                        disabled={\n                                            authUser.status !== 'active' ||\n                                            isDepositLoading ||\n                                            !isBalanceSufficientForDeposit ||\n                                            !depositAmount ||\n                                            !selectedBankAccount ||\n                                            !authUser.isExistIssueCard ||\n                                            !!userData.isPendingDeposit ||\n                                            notAllowed\n                                        }>\n                                        Deposit ${Number(depositAmount).toFixed(2)}\n                                    </button>\n                                    {notAllowed && (\n                                        <p style={{ fontSize: '12px', fontWeight: 500, color: 'red' }}>\n                                            The ability to make a deposit is currently unavailable. It will be available\n                                            again at 9AM weekday mornings.\n                                        </p>\n                                    )}\n                                </div>\n                            </CardBody>\n                        </Card>\n                        {authUser.boostLevel === 'level-vip' && <DirectDepositInstructions />}\n                    </Col>\n                </Row>\n            </section>\n\n            <EdgeToast\n                isOpen={showToast}\n                toggle={toggleToast}\n                type={toastType}\n                title={toastTitle}\n                content={toastContent}\n            />\n\n            <UnsupportedBankModal\n                isOpen={showUnsupportedBankModal}\n                toggle={() => setShowUnsupportedBankModal(false)}\n                title={modalTitle}\n                message={modalMessage}\n            />\n            <WeekendNoticeModal isOpen={showWeekendModal} onClose={() => setShowWeekendModal(false)} isDeposit={true}>\n                <p>\n                    Bank Deposits are not processed outside of business hours and will not be available until Monday\n                    morning EST.\n                </p>\n                <p>For instant deposit please use Card Deposits</p>\n            </WeekendNoticeModal>\n            <AfterHoursNoticeModal\n                isOpen={showAfterHoursModal}\n                onClose={() => setShowAfterHoursModal(false)}\n                isDeposit={true}\n            />\n            <FederalHolidayNoticeModal\n                isOpen={showFederalHolidayModal}\n                onClose={() => setShowFederalHolidayModal(false)}\n                isDeposit={true}>\n                <p>Bank Deposits are not processed on Federal Holidays.</p>\n                <p className=\"text-center\">\n                    <b>\n                        {holiday?.name}, {new Date(`${holiday?.date}T00:00:00`).toLocaleDateString('en-US')}\n                    </b>\n                    .\n                </p>\n                <p>For instant deposit please use Card Deposits.</p>\n            </FederalHolidayNoticeModal>\n        </>\n    );\n};\n\nexport default BankDepositPage;\n```\n\nI want to make it so that we check an environment variable called `ACH_HOURS_ENABLED` as a boolean and `BLOCK_ACH_AFTER` as an integer, if ACH_HOURS_ENABLED is true, then we check to see what the BLOCK_ACH_AFTER value is, if it is greater than the current time, then we show the AfterHoursNoticeModal. If ACH_HOURS_ENABLED is false, then we show do not show the modal. \n\nI'll update the code to check environment variables for ACH hours restrictions. Here's the implementation:\n\nFirst, let's modify the `AfterHoursNoticeModal.jsx` file:\n\n```jsx\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\n// Updated function to use environment variables\nconst initAfterHoursModal = (setShowAfterHoursModal, setNotAllowed) => {\n    // Check if ACH hours restriction is enabled\n    const achHoursEnabled = process.env.REACT_APP_ACH_HOURS_ENABLED === 'true';\n    \n    // If not enabled, don't show modal or restrict operations\n    if (!achHoursEnabled) {\n        setShowAfterHoursModal(false);\n        setNotAllowed(false);\n        return;\n    }\n\n    // Get the cutoff hour from environment variable or default to 18 (6 PM)\n    const blockAchAfter = parseInt(process.env.REACT_APP_BLOCK_ACH_AFTER) || 18;\n    \n    const now = new Date();\n\n    // Create a date object in the EST/EDT timezone\n    const options = { timeZone: 'America/New_York', hour: 'numeric', minute: 'numeric', hour12: false };\n    const timeString = now.toLocaleString('en-US', options);\n    // Parse the hours and minutes\n    const [hours, minutes] = timeString.split(':').map(Number);\n    console.log('Current time in EST/EDT:', timeString, 'Hours:', hours, 'Cutoff hour:', blockAchAfter);\n    \n    // Check if current hour is at or after the cutoff hour\n    const isAfterHours = hours >= blockAchAfter;\n    setShowAfterHoursModal(isAfterHours);\n    setNotAllowed(isAfterHours);\n};\n\nconst AfterHoursNoticeModal = ({ isOpen, onClose, isDeposit }) => {\n    // Get the cutoff hour from environment variable or default to 18 (6 PM)\n    const blockAchAfter = parseInt(process.env.REACT_APP_BLOCK_ACH_AFTER) || 18;\n    const achType = isDeposit ? 'ACH Deposit' : 'ACH Withdrawal';\n    \n    return (\n        <Modal isOpen={isOpen} toggle={onClose} backdrop=\"static\">\n            <ModalHeader toggle={onClose}>After Hours {isDeposit ? 'Deposit' : 'Withdrawal'} Notice</ModalHeader>\n            <ModalBody>\n                {achType} is not allowed after {blockAchAfter}:00 EST. Please try again tomorrow.\n            </ModalBody>\n            <ModalFooter>\n                <Button className=\"btn-default\" onClick={onClose}>\n                    OK\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport { initAfterHoursModal, AfterHoursNoticeModal };\n```\n\nThere's no need to modify the `BankDeposit.js` file as it already correctly calls the `initAfterHoursModal` function.\n\nFor this to work, you'll need to define these environment variables in your `.env` file:\n\n```\nREACT_APP_ACH_HOURS_ENABLED=true\nREACT_APP_BLOCK_ACH_AFTER=18\n```\n\nThis implementation:\n\n1. Checks if `REACT_APP_ACH_HOURS_ENABLED` is set to 'true' (environment variables are strings)\n2. If enabled, reads the `REACT_APP_BLOCK_ACH_AFTER` value (defaulting to 18 if not set)\n3. Sets the modal and restrictions based on comparing the current hour to the cutoff hour\n4. Updates the modal message to display the configured cutoff time\n5. If ACH hours restriction is disabled, doesn't show the modal or restrict operations\n\nNote that React apps typically prefix environment variables with `REACT_APP_` to ensure they're included in the build.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":141}}},{"id":{"replica_id":0,"value":97},"start":25966,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":142}}},{"id":{"replica_id":0,"value":98},"start":29241,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":143}}}],"summary":"ACH Hours Configuration Implementation","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":1705},"icon":"File","label":"edgeboost-frontend/src/pages/apps/funds/components/AfterHoursNoticeModal.jsx","metadata":{"path":"edgeboost-frontend/src/pages/apps/funds/components/AfterHoursNoticeModal.jsx"}},{"range":{"start":1706,"end":25594},"icon":"File","label":"edgeboost-frontend/src/pages/apps/funds/BankDeposit.js","metadata":{"path":"edgeboost-frontend/src/pages/apps/funds/BankDeposit.js"}}]}